package ru.salaleser.vacdbot.command;

import com.vdurmont.emoji.Emoji;
import ru.salaleser.vacdbot.Bot;
import sx.blah.discord.handle.obj.IMessage;
import sx.blah.discord.handle.obj.IReaction;
import sx.blah.discord.handle.obj.IUser;
import sx.blah.discord.util.RateLimitException;

import java.util.ArrayList;
import java.util.Random;
import java.util.concurrent.TimeUnit;

public class PollCommand extends Command {

	public PollCommand() {
		super("poll", "**–û–ø–∏—Å–∞–Ω–∏–µ:** –°–æ–∑–¥–∞—ë—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ\n" +
				"**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `~poll [<–≤–æ–ø—Ä–æ—Å>? [<–≤–∞—Ä–∏–∞–Ω—Ç_–æ—Ç–≤–µ—Ç–∞> / ... [<–≤–∞—Ä–∏–∞–Ω—Ç_–æ—Ç–≤–µ—Ç–∞>]]]`\n" +
				"**–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏:** `~poll` - –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º;" +
						"`~poll map` - –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—É –≤ –∫—Å–≥–æ.\n" +
				"**–ü—Ä–∏–º–µ—Ä:** `~poll –ï—Å—Ç—å –ª–∏ –∂–∏–∑–Ω—å –Ω–∞ –ú–∞—Ä—Å–µ? –î–∞ / –ù–µ—Ç / –ù–µ —É–≤–µ—Ä–µ–Ω`\n" +
				"**–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:** –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ 10; —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —è–≤–ª—è–µ—Ç—Å—è " +
				"–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ `?`, –∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ - —Å–ª—ç—à `/`");
	}

	@Override
	public void handle(IMessage message, String[] args) throws InterruptedException {
		message.getClient().changePlayingText("–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ");
		//defaults:
		int finalCountdown = 5;
		IMessage qMessage = message.getChannel().sendMessage("...");

		StringBuilder answersEnum = new StringBuilder("\n");
		String questionAndAnswers[] = splitQuestionAndAnswers(args);
		String question = "**" + questionAndAnswers[0] + "?**";
		String answers[] = questionAndAnswers[1].split("/");

		//–¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ —Ä–µ–∞–∫—Ü–∏–π:
		if (answers.length == 0 || answers.length == 1) {
			TimeUnit.MILLISECONDS.sleep(100);
			qMessage.addReaction("üëç");
			TimeUnit.MILLISECONDS.sleep(100);
			qMessage.addReaction("üëé");
		} else if (answers.length <= 10) {
			for (int i = 0; i < answers.length; i++) {
				answersEnum.append(getNumberEmoji(i))
						.append(" - ")
						.append("`")
						.append(answers[i])
						.append("`")
						.append("\n");
			}
			for (int i = 0; i < answers.length; i++) {
				TimeUnit.MILLISECONDS.sleep(100);
				qMessage.addReaction(getNumberEmoji(i));
			}
		} else {
			message.reply("*–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤*");
		}

		//–ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ:
		StringBuilder progressBar;
		String pollWrapper = "\n" + question + "\n" + answersEnum;
		for (int i = finalCountdown; i >= 0; i--) {
			TimeUnit.SECONDS.sleep(1);
			progressBar = fillProgressBar(i);
			qMessage.edit("*–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ " + i + " —Å*" +
					"```" + progressBar + "```" + pollWrapper);
		}

		//–±–æ—Ç —É–¥–∞–ª–∞–µ—Ç —Å–≤–æ–∏ —Ä–µ–∞–∫—Ü–∏–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Å—á–µ—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤:
		for (IReaction reaction : qMessage.getReactions()) {
			qMessage.removeReaction(Bot.bot, reaction);
			TimeUnit.MILLISECONDS.sleep(100);
		}

		ArrayList<IReaction> reactions = (ArrayList<IReaction>) qMessage.getReactions();
		int users = 0;
		int voters = 0;
		for (IUser user : message.getGuild().getUsers()) {
			if (!user.isBot() && !user.getPresence().getStatus().name().equals("OFFLINE")) {
				users++;
			}
		}
		StringBuilder pollResult = calculatePollResult(reactions, answers);

		//—É–¥–∞–ª—è—é –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±–æ–ª—å—à–µ –±—ã–ª–æ –±–∞–ª–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏:
		try {
			qMessage.removeAllReactions();
		} catch (RateLimitException e) {
			e.printStackTrace();
			Bot.log.sendMessage("RateLimitException caught: " + e.getMessage());
		}

		message.getClient().changePlayingText(Bot.status);

		qMessage.edit("*–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!*" +
				"``` ```" +
				"–í –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ " + reactions.size() + " –∏–∑ " + users + " —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n" +
				pollResult.toString());
	}

	private String getRandomQuestion() {
		String array[] = {
				"–¢—ã –∑–∞ –ª—É–Ω—É –∏–ª–∏ –∑–∞ —Å–æ–ª–Ω—Ü–µ? ",
				"–•–æ—á–µ—à—å –ø–∏—Ç—å? ",
				"–ö–∞–∫ –≤–∞–º —ç—Ç–∞ –ø–µ—Å–Ω—è? ",
				"–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –∞—Ä–µ–Ω–¥–∞ –∞–∫–∫–∞—É–Ω—Ç–∞?–°–∫–ª–∞–¥–Ω–æ–π –Ω–æ–∂/–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞/–ù–µ –∏–∑–º–µ—Ä—è–µ—Ç—Å—è –¥–µ–Ω—å–≥–∞–º–∏",
				"–®–ª–∞ –°–∞—à–∞ –ø–æ —à–æ—Å—Å–µ?–®–ª–∞/–ü–æ –∫—Ä–∏–≤–æ–π –¥–æ—Ä–æ–∂–∫–µ/–ü–æ–≤–µ—Ä–Ω—É–ª–∞ \"–Ω–∞–ª–µ–≤–æ\"/–ë–µ–∂–∞–ª–∞/–ù–∞—Ç–∞—à–∞/–ù–µ —Å—É—à–∫—É",
				"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2*2?1/2/3/4/5/6/7/8",
				"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?12/13/14/–°—Ç–∞—Ä—à–µ 14"
		};
		int random = new Random().nextInt(array.length);
		return array[random];
	}

	private String getMapQuestion() {
		StringBuilder mapQuestion = new StringBuilder("–í –∫–∞–∫—É—é –∫–∞—Ä—Ç—É —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å?");
		String[] maps = {
				"de_train",
				"de_nuke",
				"de_dust2",
				"de_cache",
				"de_mirage",
				"de_inferno",
				"de_cobblestone",
				"de_overpass",
				"cs_office",
				"cs_agency"
		};
		for (int i = 0; i < maps.length; i++) {
			mapQuestion.append(maps[i]);
			if (i + 1 != maps.length) mapQuestion.append("/");
		}
		return mapQuestion.toString();
	}

	private String getNumberEmoji(int number) {
		String numberEmoji[] = {":one:", ":two:", ":three:", ":four:",
				":five:", ":six:", ":seven:", ":eight:", ":nine:", ":ten:"};
		return numberEmoji[number];
	}

	private String[] splitQuestionAndAnswers(String[] args) {
		//–µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
		if (args.length == 0) {
			return getRandomQuestion().split("\\?");
		}
		//–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç "map", —Ç–æ –æ—Ç–¥–∞—é –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É:
		if (args[0].equals("map")) {
			return getMapQuestion().split("\\?");
		}
		//—Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
		StringBuilder newArgs = new StringBuilder();
		//–≤–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–±–µ–ª—ã,
		for (String arg : args) {
			newArgs.append(arg).append(" ");
		}
		//–¥–æ–±–∞–≤–ª—è—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞ –ª–µ–Ω–∏–≤—ã—Ö:
		if (!newArgs.toString().contains("?")) {
			newArgs.append("?");
		}
		System.out.println(newArgs.toString());
		//–≤—ã–¥–µ–ª—è—é –≤–æ–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.
		return newArgs.toString().split("\\?");
	}

	private StringBuilder calculatePollResult(ArrayList<IReaction> reactions, String[] answers) {
		StringBuilder result = new StringBuilder();
		result.append("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n");
		if (reactions.isEmpty()) {
			return result.replace(0, result.length(), "–ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª.");
		}
		for (int i = 0; i < reactions.size(); i++) {
			result.append(reactions.get(i).getEmoji());
			if (answers.length > 1) result.append("`").append(answers[i]).append("`");
			result.append(" = ").append("**").append(reactions.get(i).getCount()).append("**: ");
			for (IUser user : reactions.get(i).getUsers()) result.append(user.getDisplayName(Bot.guild)).append(", ");
			if (!reactions.get(i).getUsers().isEmpty()) result.replace(result.length() - 2, result.length(), ".\n");
			else result.append("–Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤.\n");
		}
		return result;
	}

	private StringBuilder fillProgressBar(int c) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < c; i++) sb.append('‚ñà');
		return sb;
	}
}
