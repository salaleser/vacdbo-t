package ru.salaleser.vacdbot.bot.command.support;

import com.vdurmont.emoji.EmojiManager;
import ru.salaleser.vacdbot.DBHelper;
import ru.salaleser.vacdbot.bot.Bot;
import ru.salaleser.vacdbot.bot.command.Command;
import sx.blah.discord.handle.obj.IGuild;
import sx.blah.discord.handle.obj.IMessage;
import sx.blah.discord.handle.obj.IReaction;
import sx.blah.discord.handle.obj.IUser;

import java.util.HashSet;
import java.util.List;
import java.util.Random;

import static ru.salaleser.vacdbot.Util.*;

public class PollCommand extends Command {

	public PollCommand() {
		super("poll", SUPPORT, "–°–æ–∑–¥–∞—ë—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ.", new String[]{"–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ"});
	}

	@Override
	public void help(IMessage message) {
		message.getChannel().sendMessage(buildHelp(description,
				"`~poll [<–≤–æ–ø—Ä–æ—Å>?[<–≤–∞—Ä–∏–∞–Ω—Ç_–æ—Ç–≤–µ—Ç–∞>/[<–≤–∞—Ä–∏–∞–Ω—Ç_–æ—Ç–≤–µ—Ç–∞>]]]`.",
				"`~poll` ‚Äî –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º –≤–æ–ø—Ä–æ—Å–æ–º;\n" +
						"`~poll map` ‚Äî –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∫–∞—Ä—Ç—É –≤ –∫—Å–≥–æ.",
				"`~poll –ï—Å—Ç—å –ª–∏ –∂–∏–∑–Ω—å –Ω–∞ –ú–∞—Ä—Å–µ? –î–∞ / –ù–µ—Ç / –ù–µ —É–≤–µ—Ä–µ–Ω`.",
				"–≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ 10; —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ —è–≤–ª—è–µ—Ç—Å—è\n" +
						"–≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∑–Ω–∞–∫ `?`, –∞ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ ‚Äî —Å–ª—ç—à `/`."
				)
		);
	}

	// FIXME: 23.02.2018 –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–∏ —Ä–∞–≤–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≥–æ–ª–æ—Å–æ–≤ –±–æ—Ç –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ–±–µ–¥—É –ø–µ—Ä–≤–æ–º—É –≤–∞—Ä–∏–∞–Ω—Ç—É

	@Override
	public void handle(IGuild guild, IMessage message, String[] args) {
		message.getClient().changePlayingText("–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ");
		this.guild = guild;

		int countdown = 20;
		String countdownValue = DBHelper.getOption(guild.getStringID(), name, "countdown");
		if (isNumeric(countdownValue) &&
				Integer.parseInt(countdownValue) >= 5 &&
				Integer.parseInt(countdownValue) <= 60) {
			countdown = Integer.parseInt(countdownValue);
		}

		IMessage qMessage = message.getChannel().sendMessage("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è...");

		StringBuilder answersEnum = new StringBuilder("\n");
		String questionAndAnswers[] = splitQuestionAndAnswers(args);
		String question = b(questionAndAnswers[0] + "?");
		String answers[] = questionAndAnswers[1].split("/");

		//–¥–æ–±–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ —Ä–µ–∞–∫—Ü–∏–π:
		// FIXME: 30.11.2017 –õ—ë—Ö–∞ –∏–∑ –±—É–¥—É—â–µ–≥–æ, –Ω—É –Ω–∞—É—á–∏—Å—å —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–æ–≤—ã–º–∏ –º–æ–ª–æ–¥—ë–∂–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏, –∞?
		if (answers.length == 0 || answers.length == 1) {
			delay(100);
			qMessage.addReaction(EmojiManager.getByUnicode("üëç"));
			delay(100);
			qMessage.addReaction(EmojiManager.getByUnicode("üëé"));
		} else if (answers.length <= 10) {
			for (int i = 0; i < answers.length; i++) {
				answersEnum.append(EmojisNumbers.values()[i].emoji()).append(" ‚Äî ").append(code(answers[i])).append("\n");
			}
			for (int i = 0; i < answers.length; i++) {
				delay(100);
				qMessage.addReaction(EmojisNumbers.values()[i].emoji());
			}
		} else {
			message.reply(i("–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤"));
		}

		//–ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ:
		StringBuilder progressBar;
		String barchar = "‚ñà";
		if (DBHelper.getOption(guild.getStringID(), name, "barchar").length() == 1) {
			barchar = DBHelper.getOption(guild.getStringID(), name, "barchar");
		}
		String pollWrapper = "\n" + question + "\n" + answersEnum;
		for (int i = countdown; i > 0; i--) {
			delay(1000);
			progressBar = fillProgressBar(barchar, i);
			qMessage.edit(i("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑ " + i + " —Å") + block(progressBar.toString()) + pollWrapper);
		}
		delay(1000);
		qMessage.edit(i("–°—Ç–∞–≤–∫–∏ —Å–¥–µ–ª–∞–Ω—ã! –°—Ç–∞–≤–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç. –ò–¥—ë—Ç –ø–æ–¥—Å—á—ë—Ç –≥–æ–ª–æ—Å–æ–≤...") + block(" ") + pollWrapper);

		//–ø–æ–ª—É—á–∞—é —Ä–µ–∞–∫—Ü–∏–∏-–≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏—Å—Ç:
		delay(2000);
		List<IReaction> reactions = qMessage.getReactions();

		// FIXME: 17.11.2017 —á—ë—Ä–Ω–∞—è –º–∞–≥–∏—è:
		//–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—ë—Ä–Ω—É—é –º–∞–≥–∏—é –¥–∏—Å–∫–æ—Ä–¥–∞ (–ø–æ –Ω–µ–≤—ã—è—Å–Ω–µ–Ω–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º –∏–Ω–æ–≥–¥–∞ —Ä–µ–∞–∫—Ü–∏–π –Ω–µ—Ç —Å–æ–≤—Å–µ–º):
		if (reactions.isEmpty()) {
			qMessage.edit(i("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –º–∞–≥–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —á—ë—Ä–Ω–∞—è, —Ä–µ–∞–∫—Ü–∏–∏ –Ω–µ –ø–æ—Å—á–∏—Ç–∞–ª–∏—Å—å, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ " +
					"—ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥–∏—Å–∫–æ—Ä–¥–µ, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –≤ –º–æ–∏—Ö –∫—Ä–∏–≤—ã—Ö —Ä—É–∫–∞—Ö, –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å —ç—Ç–æ " +
					"–ø–æ—á–∏–Ω–∏—Ç—å. –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–µ—Å–æ—Å—Ç–æ—è–≤—à–∏–º—Å—è –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."));
			qMessage.removeAllReactions();
			message.getClient().changePlayingText(Bot.STATUS);
			return;
		}
		HashSet<IUser> voters = new HashSet<>();
		int winnerNumber = 0;
		IReaction winner = reactions.get(0);
		for (int i = 0; i < reactions.size(); i++) {
			//–≤—ã—è–≤–ª—è—é –≤–∞—Ä–∏–∞–Ω—Ç-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å:
			if (reactions.get(i).getUsers().size() > winner.getUsers().size()) {
				winner = reactions.get(i);
				winnerNumber = i;
			}
			//–ø–æ–ø—É—Ç–Ω–æ —É–¥–∞–ª—è—é –±–æ—Ç–æ–≤:
			// FIXME: 17.11.2017 –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è –ø—Ä–∏—Ö–æ–¥–∏—Ç—Å—è –æ–±—Ö–æ–¥–∏—Ç—å
			for (IUser user : reactions.get(i).getUsers()) if (user.isBot()) reactions.get(i).getUsers().remove(user);
			//–ø–æ–ø—É—Ç–Ω–æ —Å—á–∏—Ç–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
			for (IUser user : reactions.get(i).getUsers()) if (!user.isBot()) voters.add(user);
		}

		//–æ—Ç–º–µ–Ω—è—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª (–Ω–µ —Å—á–∏—Ç–∞—è –±–æ—Ç–∞):
		if (voters.isEmpty()) {
			qMessage.edit("\n" + question + "\n\n" + i("–ù–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª! –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω—ã."));
			message.getClient().changePlayingText(Bot.STATUS);
			qMessage.removeAllReactions(); // FIXME: 17.11.2017 –ø–æ–≤—Ç–æ—Ä –∫–æ–¥–∞
			return;
		}

		StringBuilder pollResult = calculatePollResult(reactions, answers);

		//—É–¥–∞–ª—è—é –≤—Å–µ —Ä–µ–∞–∫—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±–æ–ª—å—à–µ –±—ã–ª–æ –±–∞–ª–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏:
		qMessage.removeAllReactions();

		//—Å—á–∏—Ç–∞—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –æ—Ñ–ª–∞–π–Ω:
		int usersNumber = 0;
		for (IUser user : message.getGuild().getUsers()) {
			if (!user.isBot() && !user.getPresence().getStatus().name().equals("OFFLINE")) usersNumber++;
		}

		String result = b("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!") + block(" ") + "\n" + question + "\n\n" +
				"–í –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ –ø—Ä–∏–Ω—è–ª–∏ —É—á–∞—Å—Ç–∏–µ " + voters.size() + " –∏–∑ " + usersNumber +
				" —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n\n" + pollResult.toString() + "\n" + "–í–∞—Ä–∏–∞–Ω—Ç " + winner.getEmoji();
		if (answers.length > 2) result += code(answers[winnerNumber]) + " –Ω–∞–±—Ä–∞–ª –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤!";
		else result += " –Ω–∞–±—Ä–∞–ª –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤!";
		qMessage.edit(result);

		message.getClient().changePlayingText(Bot.STATUS);
	}

	private String getRandomQuestion() {
		String array[] = {
				"–ö—Ç–æ –ø–æ–π–¥—ë—Ç –≤ –ø—É–±–≥? ",
				"–°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2+2*2?1/2/3/4/5/6/7/8",
				"–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?12/13/14/–°—Ç–∞—Ä—à–µ 14"
		};
		int random = new Random().nextInt(array.length);
		return array[random];
	}

	private String getMapQuestion() {
		StringBuilder mapQuestion = new StringBuilder("–í –∫–∞–∫—É—é –∫–∞—Ä—Ç—É —Ö–æ—á–µ—à—å —Å—ã–≥—Ä–∞—Ç—å?");
		String[] maps = {"de_train", "de_nuke", "de_dust2", "de_cache", "de_mirage",
				"de_inferno", "de_cobblestone", "de_overpass", "cs_office", "cs_agency"};
		for (int i = 0; i < maps.length; i++) {
			mapQuestion.append(maps[i]);
			if (i + 1 != maps.length) mapQuestion.append("/");
		}
		return mapQuestion.toString();
	}

	private String[] splitQuestionAndAnswers(String[] args) {
		//–µ—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞—é —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:
		if (args.length == 0) return getRandomQuestion().split("\\?");
		//–µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç "map", —Ç–æ –æ—Ç–¥–∞—é –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫—É:
		if (args[0].equals("map")) return getMapQuestion().split("\\?");
		//–¥–æ–±–∞–≤–ª—è—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –∑–∞ –ª–µ–Ω–∏–≤—ã—Ö:
		if (args.length == 1) args[0] += "?";
		//—Å–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:
		StringBuilder newArgs = new StringBuilder();
		//–≤–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–±–µ–ª—ã,
		for (String arg : args) newArgs.append(arg).append(" ");
		//–≤—ã–¥–µ–ª—è—é –≤–æ–ø—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤.
		return newArgs.toString().split("\\?");
	}

	private StringBuilder calculatePollResult(List<IReaction> reactions, String[] answers) {
		StringBuilder result = new StringBuilder();
		result.append(bi("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è:\n\n"));
		for (int i = 0; i < reactions.size(); i++) {
			result.append(reactions.get(i).getEmoji());
			if (answers.length > 1) result.append(code(answers[i]));
			result.append(" = **");
			int c = 0;
			for (IUser user : reactions.get(i).getUsers()) if (!user.isBot()) c++;
			result.append(c).append("**: ");
			for (IUser user : reactions.get(i).getUsers()) {
				if (!user.isBot()) result.append(getName(guild, user)).append(", ");
			}
			if (!reactions.get(i).getUsers().isEmpty()) {
				result.replace(result.length() - 2, result.length(), ".\n");
			} else {
				result.append(b("–Ω–µ—Ç –≥–æ–ª–æ—Å–æ–≤.\n"));
			}
		}
		return result;
	}

	private StringBuilder fillProgressBar(String barchar, int c) {
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < c; i++) sb.append(barchar);
		return sb;
	}
}
// –≠–¢–ê –î–õ–ò–ù–ù–ê–Ø –°–¢–†–û–ö–ê –ù–£–ñ–ù–ê –î–õ–Ø –¢–û–ì–û, –ß–¢–û–ë–´ –ü–û–Ø–í–ò–õ–ê–°–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û –°–ö–†–û–õ–õ–ò–¢–¨ –î–õ–Ø –î–ò–°–ü–õ–ï–Ø –° –ú–ê–õ–ï–ù–¨–ö–û–ô –î–ò–ê–ì–û–ù–ê–õ–¨–Æ, –ù–ê–ü–†–ò–ú–ï–† –î–õ–Ø –ú–û–ï–ì–û –û–î–ò–ù–ù–ê–î–¶–ê–¢–ò–î–Æ–ô–ú–û–í–û–ì–û –ú–ê–ö–ë–£–ö–ê –≠–ô–†