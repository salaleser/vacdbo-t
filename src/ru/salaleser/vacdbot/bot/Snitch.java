package ru.salaleser.vacdbot.bot;

import com.vdurmont.emoji.EmojiManager;
import sx.blah.discord.api.events.EventSubscriber;
import sx.blah.discord.handle.impl.events.guild.channel.message.MessageReceivedEvent;
import sx.blah.discord.handle.obj.IChannel;
import sx.blah.discord.handle.obj.IMessage;
import sx.blah.discord.handle.obj.IUser;

import java.sql.Timestamp;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;

import static ru.salaleser.vacdbot.Config.*;
import static ru.salaleser.vacdbot.Util.*;
import static ru.salaleser.vacdbot.bot.Bot.*;

class Snitch {

	private IMessage message;

	private void snitch() { //fixme –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –±–∞—Ä–∞—Ö–ª–æ
		String content = message.getContent().toLowerCase();

		// –ü–†–û–í–ï–†–ö–ê –ù–ê –°–û–î–ï–†–ñ–ê–ù–ò–ï –°–õ–û–í–ê –ò–ó –°–û–û–ë–©–ï–ù–ò–Ø –í –ö–ò–î–õ–ò–°–¢–ï
		String[] kidWordlist = new String[] {
				"–ª–æ–ª",
				"–∫–µ–∫",
				"—Ä–æ—Ñ–ª",
				"—ç—â–∫–µ—Ä–µ",
		};
		for (String word : kidWordlist) {
			if (content.contains(word)) {
				message.addReaction(EmojiManager.getByUnicode("üéí"));
				message.getChannel().sendMessage("—à–∫–æ–ª—å–Ω–∏–∫ detected");
				exec(message.getGuild(), "tts", new String[]{"–≤–Ω–∏–º–∞–Ω–∏–µ, –≤ –∫–∞–Ω–∞–ª–µ " +
						message.getChannel().getName() + " –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —à–∫–æ–ª—å–Ω–∏–∫!"});
			}
		}

		// –ü–†–û–í–ï–†–ö–ê –ù–ê –û–®–ò–ë–ö–ò
		HashMap<String, String> dictionary = new HashMap<>();
		dictionary.put("–ø–æ—à–æ–ª", "–ø–æ—à__—ë__–ª");
		dictionary.put("–ø—Ä–∏—à–æ–ª", "–ø—Ä–∏—à__—ë__–ª");
		dictionary.put("–ø–æ–¥–æ—à–æ–ª", "–ø–æ–¥–æ—à__—ë__–ª");
//		dictionary.put("—à–æ–ª", "—à__—ë__–ª"); FIXME –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
		dictionary.put("—É—à–æ–ª", "—É—à__—ë__–ª");
		dictionary.put("–Ω–∞—à–æ–ª", "–Ω–∞—à__—ë__–ª");
		dictionary.put("–ø—Ä–æ—à–æ–ª", "–ø—Ä–æ—à__—ë__–ª");
		dictionary.put("–¥–æ—à–æ–ª", "–¥–æ—à__—ë__–ª");
		String[] badNounsWordlist = new String[] {
				"—à–∫–æ–ª—å–Ω–∏–∫",
				"–∑–∞—Ç—É–ø–æ–∫",
				"–Ω–µ–≤–µ–∂–¥–∞",
				"—à–∫–æ–ª–æ–∑–∞–≤—Ä"
		};
		String[] badAdjsWordlist = new String[] {
				"–Ω–µ–≥—Ä–∞–º–æ—Ç–Ω—ã–π",
				"–≥–ª—É–ø–µ–Ω—å–∫–∏–π",
				"—Ç—É–ø–µ–Ω—å–∫–∏–π",
				"—Ç—É–ø–æ–≤–∞—Ç—ã–π"
		};
		for (String word : dictionary.keySet()) {
			if (content.contains(word)) {
				message.reply("–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–µ \"" + word + "\", –∞ \"" + dictionary.get(word) + "\", " +
						badAdjsWordlist[ThreadLocalRandom.current().nextInt(badAdjsWordlist.length)] + " " +
						badNounsWordlist[ThreadLocalRandom.current().nextInt(badNounsWordlist.length)] + "!");
			}
		}
	}

	private String[] leadin = new String[]{
			"–ï—Å–ª–∏ —á–æ, —Ç–æ –≤–æ—Ç:",
			"–í–æ—Ç —Ç–∞–∫–æ–µ –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è ‚Äî",
			"–ú–µ–∂–¥—É –¥–µ–ª–æ–º,",
			"–ú–µ–∂–¥—É –ø—Ä–æ—á–∏–º,",
			"–ú–µ–∂–¥—É –ø—Ä–æ—á–∏–º,",
			"–ú–µ–∂–¥—É –ø—Ä–æ—á–∏–º,",
			"–û–¥–Ω–∞–∫–æ,",
			"–í–æ—Ç —ç—Ç–æ –∏—Å–∫–∞–ª–∏?",
			"–í–¥—Ä—É–≥ –ø–æ–º–æ–∂–µ—Ç,",
			"–ó–∞–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–π —Ñ–∞–∫—Ç ‚Äî",
			"–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ —Ñ–∞–∫—Ç ‚Äî",
			"–ê",
			"–ö—Å—Ç–∞—Ç–∏,",
			"–í–æ —á–æ —É–º–µ—é ‚Äî",
			"–í–æ—Ç —Ç–∞–∫–æ–µ –º–æ–≥—É ‚Äî",
			"–ê —è –∑–Ω–∞—é, —á—Ç–æ",
			"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è ‚Äî",
			"–ê –í—ã –∑–Ω–∞–ª–∏, —á—Ç–æ",
			"–ê –í—ã –∑–Ω–∞–ª–∏, —á—Ç–æ",
			"–ê –í—ã –∑–Ω–∞–ª–∏, —á—Ç–æ",
			"–ê –í—ã –∑–Ω–∞–ª–∏, —á—Ç–æ",
			"–ê –í—ã –∑–Ω–∞–ª–∏, —á—Ç–æ",
			"–ê –í—ã –∑–Ω–∞–ª–∏, —á—Ç–æ"
	};

	@EventSubscriber
	public void onMessage(MessageReceivedEvent event) {
		this.message = event.getMessage();
		IChannel channel = event.getChannel();
		String content = message.getContent().toLowerCase();

		if (event.getAuthor().isBot()) return; //–Ω–∞ –±–æ—Ç–æ–≤ –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å
		if (event.getMessage().getContent().startsWith(PREFIX)) return; //–Ω–∞ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å

		String[] args = event.getMessage().getContent().split(" ");
		HashMap<String, String> argsMap = getArgs(event.getGuild(), args);
		if (content.matches(".*<@!?\\d{18}>.*")) argsMap.remove(DISCORDID);
		if (argsMap.containsKey(NUMBER)) argsMap.remove(NUMBER);
		StringBuilder argsBuilder = new StringBuilder();
		argsMap.forEach((key, value) -> {
			switch (key) {
				case STEAMID64:
					key = "—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å SteamID64 " + value;
					value = "http://steamcommunity.com/profiles/" + value;
					break;
				case DISCORDID:
					IUser user = getClient().getUserByID(Long.parseLong(value));
					key = "–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID " + value;
					value = getName(event.getGuild(), user);
					break;
				case GUILDID:
					key = "–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–∏–ª—å–¥–∏–∏ —Å ID " + value;
					value = getClient().getGuildByID(Long.parseLong(value)).getName();
					break;
				case ROLEID:
					key = "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ —Å ID " + value;
					value = getClient().getRoleByID(Long.parseLong(value)).getName();
					break;
				case TIMESTAMP:
					key = "UNIX-time " + value;
					Timestamp timestamp = new Timestamp(Long.parseLong(value) * 1000L);
					DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, dd MMMM YYYY –≥–æ–¥–∞ –≤ HH:mm:ss");
					String date = timestamp.toLocalDateTime().format(formatter);
					long diff = System.currentTimeMillis() - timestamp.getTime();
					String future = "";
					String past = " –Ω–∞–∑–∞–¥, ";
					if (diff < 0) {
						future = "—á–µ—Ä–µ–∑ ";
						past = ", ";
						diff = Math.abs(diff);
					}
					if (diff <= TimeUnit.MINUTES.toMillis(1)) {
						long quantity = TimeUnit.MILLISECONDS.toSeconds(diff);
						value = future + quantity + " " + getEnding("—Å–µ–∫—É–Ω–¥–∞", quantity) + past + date;
					} else if (diff <= TimeUnit.HOURS.toMillis(1)) {
						long quantity = TimeUnit.MILLISECONDS.toMinutes(diff);
						value = future + quantity + " " + getEnding("–º–∏–Ω—É—Ç–∞", quantity) + past + date;
					} else if (diff <= TimeUnit.DAYS.toMillis(1)) {
						long quantity = TimeUnit.MILLISECONDS.toHours(diff);
						value = future + quantity + " " + getEnding("—á–∞—Å", quantity) + past + date;
					} else {
						long quantity = TimeUnit.MILLISECONDS.toDays(diff);
						value = future + quantity + " " + getEnding("–¥–µ–Ω—å", quantity) + past + date;
					}
					break;
				case COMMANDNAME:
					key = "–∏–º—è –∫–æ–º–∞–Ω–¥—ã \"" + value + "\"";
					value = code(PREFIX + getCommandManager().getCommand(value).name);
					break;
				case USD:
					key = value + " –ø–∏–Ω–¥–æ—Å—Å–∫–∏—Ö –¥–µ–Ω–µ–≥";
					value = toRubKop(String.valueOf(RUB_USD * Integer.parseInt(value))) +
							" (–ø–æ –∫—É—Ä—Å—É " + toRubKop(String.valueOf(RUB_USD)) + ")";
					break;
				case SEX:
					key = "–ø–æ–ª " + value;
					switch (value) {
						case "W": value = "–∂–µ–Ω—Å–∫–∏–π";
							break;
						case "N": value = "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π (–≤–æ–∑–º–æ–∂–Ω–æ, –∑–∞–¥–Ω–µ–ø—Ä–∏–≤–æ–¥–Ω—ã–π)";
							break;
						default: value = "–º—É–∂—Å–∫–æ–π";
							break;
					}
					break;
			}
			argsBuilder.append("; ").append(u(key)).append(" = ").append(b(value));
		});
		argsBuilder.delete(0, 1); //—É–¥–∞–ª—è—é –∑–∞–ø—è—Ç—É—é
		if (argsMap.size() != 0) channel.sendMessage(i(leadin[new Random().nextInt(leadin.length)] + argsBuilder));

		if (content.matches(".*–ø—Ä–∏–≤–µ—Ç.*") || content.contains("\uD83D\uDC4B")) {
			message.addReaction(EmojiManager.getForAlias("wave"));
		} else if (content.matches(".*–∫—Ç–æ\\s.*") ||
				content.matches(".{4,}\\?$") ||
				content.matches("^–≥–æ\\s.*") ||
				content.matches(".*–±—É–¥–µ—à—å.*|.*–±—É–¥–µ—Ç.*") ||
				content.matches(".*–∫—Å\\s?–≥–æ.*|.*cs[\\s:]?go.*") ||
				content.matches(".*–ø—É–±–≥.*|.*pubg.*|.*–ø—É–ø–æ–∫.*|.*–ø—É–ø—á–∏–∫.*|.*–ø–∞–±—á–∏–∫.*")) {
			message.addReaction(EmojiManager.getByUnicode("‚ûï"));
			delay(100);
			message.addReaction(EmojiManager.getByUnicode("‚ûñ"));
		}

		snitch();
	}
}
// –≠–¢–ê –î–õ–ò–ù–ù–ê–Ø –°–¢–†–û–ö–ê –ù–£–ñ–ù–ê –î–õ–Ø –¢–û–ì–û, –ß–¢–û–ë–´ –ü–û–Ø–í–ò–õ–ê–°–¨ –í–û–ó–ú–û–ñ–ù–û–°–¢–¨ –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û –°–ö–†–û–õ–õ–ò–¢–¨ –î–õ–Ø –î–ò–°–ü–õ–ï–Ø –° –ú–ê–õ–ï–ù–¨–ö–û–ô –î–ò–ê–ì–û–ù–ê–õ–¨–Æ, –ù–ê–ü–†–ò–ú–ï–† –î–õ–Ø –ú–û–ï–ì–û –û–î–ò–ù–ù–ê–î–¶–ê–¢–ò–î–Æ–ô–ú–û–í–û–ì–û –ú–ê–ö–ë–£–ö–ê –≠–ô–†